The entrypoint class is

sequenceDiagramGenerator.UI.TestUI.java

A sample execution argument for small taint analysis would be 
(not including java and the argument to the location of the TestUI jar/class)

-ta -classpath "/home/brian/javax.servlet-api-3.0.1.jar" -jars "/home/brian/Desktop/gradschool/supratik/tomcat-catalina-7.0.25.jar" -taintfile "/home/brian/Desktop/gradschool/supratik/taintfile" -outdir "/home/brian/Desktop/gradschool/supratik/outdirtomcat/" -startswith "org.apache.catalina"

-ta specifies taint analysis, there are other options for older functionality.

-classpath specifies TO TAINT ANALYSIS what jars should be loaded into SOOT's classpath

-jars specifies the jar(s) we will actually analyze.

-taintfile specifies the file which lists methods we consider tainted

-outdir specifies the directory to which any output files (pdf and json, and potentially dbg txt) will be written / OVERWRITTEN

-startswith specifies a package prefix in the jar(s) to be analyzed that we want to restrict ourselves to


Execution Process -
If we examine the function
RunTaintAnalysis 
in TestUI.java

We first pull execution arguments into data structures.
Then we look at the jar(s) to analyze and pull out every class in the jar, then compare
its full package name to the startswith prefix. If they match we add the class to a list
for analysis

We then call
Analyzer.AnalyzeFromJar
which creates the code hypergraph given the class subset.  More details below

After this we create a TaintAnalyzer object from the taintfile argument, and run the method
TSOrInvoke.GenerateTaintDiagrams More details below
To create an arraylist of SequenceDiagram objects

After this we build a diagram reducer object,
GenReducer
And a pdf generator
DiagramPDFGen
And we use those to print the diagrams out to the output directory.

sequenceDiagramGenerator.sootAnalyzer.Analyzer.AnalyzeFromJar

This function uses soot to create a hypergraph by iteratively adding each class in the analysis
subset to a initially empty hypergraph object.

The call to 
Scene.v().loadClassAndSupport(listClassNames.get(i)
May fail for some classes that soot for whatever reason can't interpret.  
This is often because the classpath given to soot is incomplete / incorrect.

If soot is able to load the class, we call the method 
Analyzer.AddClassToHypergraph
-NOTE: There is a bad kludge in this method, see comments.  
-There have been a few classes that,
-although they may get through loadClassAndSupport, cannot be instrumented.
-I did not see an alternative but to deal with these classes individually at the time.
-Although even this method should be made more formal.
This function constructs an instance of
sequenceDiagramGenerator.MethodNodeAnnot
via the function
Analyzer.BuildAnnotFromMethod
and uses it to annotate a new node which is added to the hypergraph.

BuildAnnotFromMethod uses the soot method retrieveActiveBody() to actually get
the individual statements from soot.
This method may fail in a manner which breaks the soot analysis, and can't
be fixed by catching an exception

Each method is annotated by a directed acyclic graph which has as a 
"root" / origin the initial statement in the function.
Every statement in java may have either 0, 1, or 2 subsequent statements
all meaningful branch statements will have 2 subsequent statements
terminating statements will have 0 subsequent statements
all other statements will have 1 subsequent statement
MethodNodeAnnot's BranchableStmt variable theStmt
is the initial "root" statement of the function that the node describes

After creating these nodes, we return to AnalyzeFromJar to 
build the edges between nodes, via the 
Analyzer.AddEdgesToHypergraph
Which uses
Analyzed.AddRecStmts
We add the edges at this point so that we can distinguish between
nodes that we want to contain in our hypergraph
and nodes that represent calls out of the analyzed methods
which will be represented as edges to dummy nodes that do not
contain soot-analyzed methods.  This approach is useful for
sequence diagram generation as it limits scope
It may have drawbacks for taint analysis but we don't do this at the 
moment because we already have scaling issues.

An implementation that adds complete values of those nodes is visible in 
AddRecStmts near the comment //Brian 2017 dangerous code
but it is commented out.

Adding the links between nodes is a graph traversal of each trace graph
in each node in the hypergraph.
If we are going to run out of memory, this is one of the places that is
most likely to do it.

When we have a complete hypergraph, we utilize
sequenceDiagramGenerator.sootAnalyzer.TSOrInvoke.GenerateTaintDiagrams
in TestUI.RunTaintAnalysis

The class TSOrInvoke contains some of the most difficult to understand 
pieces of code.  The hypergraph contains the potential code paths of
the program without any context.  Navigating through the hypergraph
to create a diagram requires maintaining an additional data structure 
to accompany the traversal, which creates a pseudostate.

This pseudostate (Represented by an instance of TSDListAndReturns)
 represents the variables which will be actors in the 
diagram.  These are either instance variables with type, or they may
be calls into the static instance of a particular class.  
They may be modified by variations on the assignment statement.
When we start a diagram, (In TSOrInvoke.GenerateAllDiagrams) 
we postulate some outer instance for us to start in. (may be a static
instance depending on the static/nonstatic nature of the method we
have chosen as a starting point).

When we navigate through a node, we generate all possible traces 
(with some exceptions because of loops), from the DAG of the node annotation.
Then we clone the TSDListAndReturns, which contains the pseudostate upon entry,
as many times as there are traces, and send each cloned state through 
one trace to be modified.  This results in the data structure that will
in the end, be the sequence diagram / potential taint data structure.

The remainder of the program concerns rendering the diagrams from 
a TSDListAndReturns object.

The most tricky and dangerous part of the trace generation is handling
individual statements in each method.  We look through the statements
of each trace sequentially and if we identify that they create a 
modification in state, we model that modification.  We look through
soot's statement object to determine two important possible facts
Does the statement contain an assignment expression
Does the statement contain an invoke expression
It is possible that a statement contains both.

If a statement contains an assignment expression, we need to or 
create the relevant objects that participate in the expression
and "link" them.  
Objects that participate in state and message passing are defined by the
sequenceDiagramGenerator.sdedit.SDObject class
For a simple statement like:
Object x = y;
What we see as happening is that there was prior to this statement
some instance that had the name y attached to it.  After this
statement we will see both the names x and y as attached to this
object.
Occasionally we will fail to understand that two objects are
conceptually the "same".  This occurs most frequently with
data sets (such as arrays / lists).  If the member of the 
array/list retrieved is the result of a run-time calculation, as it
often is, we won't be able to necessarily tell what member of the 
array is retrieved at runtime.  In this case, we will identify this
as a new and unrelated object.

If a statement contains an invoke expression, we need to navigate
in the hypergraph to the next location with a copy of the current
psuedostate. If the invoke expression contains arguments, we see this
as essentially assigning those new names to the relevant object as it passes into
the new function.

Therefore, objects (SDObject), possess two name lists. theCurrentNames,
which is every name that we think is actually a reference at a certain point in 
traversal, and theNameHistory, which is every name that we ever used for an object.
theNameHistory will be referenced when we have to pick a single name to use for
the object when creating a sequence diagram. 
